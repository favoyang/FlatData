// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBufferGenerated.BrenchmarkFlatBuffer
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct BrenchmarkMasterTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static BrenchmarkMasterTable GetRootAsBrenchmarkMasterTable(ByteBuffer _bb) { return GetRootAsBrenchmarkMasterTable(_bb, new BrenchmarkMasterTable()); }
  public static BrenchmarkMasterTable GetRootAsBrenchmarkMasterTable(ByteBuffer _bb, BrenchmarkMasterTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BrenchmarkMasterTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FlatBufferGenerated.BrenchmarkFlatBuffer.ItemA? Data(int j) { int o = __p.__offset(4); return o != 0 ? (FlatBufferGenerated.BrenchmarkFlatBuffer.ItemA?)(new FlatBufferGenerated.BrenchmarkFlatBuffer.ItemA()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FlatBufferGenerated.BrenchmarkFlatBuffer.ItemA? DataByKey(string key) { int o = __p.__offset(4); return o != 0 ? FlatBufferGenerated.BrenchmarkFlatBuffer.ItemA.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }
  public FlatBufferGenerated.BrenchmarkFlatBuffer.ItemB? TestArray(int j) { int o = __p.__offset(6); return o != 0 ? (FlatBufferGenerated.BrenchmarkFlatBuffer.ItemB?)(new FlatBufferGenerated.BrenchmarkFlatBuffer.ItemB()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TestArrayLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FlatBufferGenerated.BrenchmarkFlatBuffer.ItemB? TestArrayByKey(int key) { int o = __p.__offset(6); return o != 0 ? FlatBufferGenerated.BrenchmarkFlatBuffer.ItemB.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }

  public static Offset<FlatBufferGenerated.BrenchmarkFlatBuffer.BrenchmarkMasterTable> CreateBrenchmarkMasterTable(FlatBufferBuilder builder,
      VectorOffset DataOffset = default(VectorOffset),
      VectorOffset TestArrayOffset = default(VectorOffset)) {
    builder.StartTable(2);
    BrenchmarkMasterTable.AddTestArray(builder, TestArrayOffset);
    BrenchmarkMasterTable.AddData(builder, DataOffset);
    return BrenchmarkMasterTable.EndBrenchmarkMasterTable(builder);
  }

  public static void StartBrenchmarkMasterTable(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset DataOffset) { builder.AddOffset(0, DataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<FlatBufferGenerated.BrenchmarkFlatBuffer.ItemA>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<FlatBufferGenerated.BrenchmarkFlatBuffer.ItemA>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTestArray(FlatBufferBuilder builder, VectorOffset TestArrayOffset) { builder.AddOffset(1, TestArrayOffset.Value, 0); }
  public static VectorOffset CreateTestArrayVector(FlatBufferBuilder builder, Offset<FlatBufferGenerated.BrenchmarkFlatBuffer.ItemB>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTestArrayVectorBlock(FlatBufferBuilder builder, Offset<FlatBufferGenerated.BrenchmarkFlatBuffer.ItemB>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTestArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatBufferGenerated.BrenchmarkFlatBuffer.BrenchmarkMasterTable> EndBrenchmarkMasterTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatBufferGenerated.BrenchmarkFlatBuffer.BrenchmarkMasterTable>(o);
  }
};


}
