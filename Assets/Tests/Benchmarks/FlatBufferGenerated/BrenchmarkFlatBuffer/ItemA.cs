// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBufferGenerated.BrenchmarkFlatBuffer
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ItemA : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ItemA GetRootAsItemA(ByteBuffer _bb) { return GetRootAsItemA(_bb, new ItemA()); }
  public static ItemA GetRootAsItemA(ByteBuffer _bb, ItemA obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemA __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int Hp { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateHp(int Hp) { int o = __p.__offset(8); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, Hp); return true; } else { return false; } }

  public static Offset<FlatBufferGenerated.BrenchmarkFlatBuffer.ItemA> CreateItemA(FlatBufferBuilder builder,
      StringOffset IdOffset = default(StringOffset),
      StringOffset NameOffset = default(StringOffset),
      int Hp = 0) {
    builder.StartTable(3);
    ItemA.AddHp(builder, Hp);
    ItemA.AddName(builder, NameOffset);
    ItemA.AddId(builder, IdOffset);
    return ItemA.EndItemA(builder);
  }

  public static void StartItemA(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, StringOffset IdOffset) { builder.AddOffset(0, IdOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddHp(FlatBufferBuilder builder, int Hp) { builder.AddInt(2, Hp, 0); }
  public static Offset<FlatBufferGenerated.BrenchmarkFlatBuffer.ItemA> EndItemA(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // Id
    return new Offset<FlatBufferGenerated.BrenchmarkFlatBuffer.ItemA>(o);
  }

  public static VectorOffset CreateSortedVectorOfItemA(FlatBufferBuilder builder, Offset<ItemA>[] offsets) {
    Array.Sort(offsets, (Offset<ItemA> o1, Offset<ItemA> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static ItemA? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new ItemA().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};


}
