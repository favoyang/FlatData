// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBufferGenerated.Simple4.Database
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct FoodProfit : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FoodProfit GetRootAsFoodProfit(ByteBuffer _bb) { return GetRootAsFoodProfit(_bb, new FoodProfit()); }
  public static FoodProfit GetRootAsFoodProfit(ByteBuffer _bb, FoodProfit obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FoodProfit __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FlatBufferGenerated.Simple4.Database.EProfitFoodType Type { get { int o = __p.__offset(4); return o != 0 ? (FlatBufferGenerated.Simple4.Database.EProfitFoodType)__p.bb.Get(o + __p.bb_pos) : FlatBufferGenerated.Simple4.Database.EProfitFoodType.TypeA; } }
  public bool MutateType(FlatBufferGenerated.Simple4.Database.EProfitFoodType Type) { int o = __p.__offset(4); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)Type); return true; } else { return false; } }
  public int Price(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PriceLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPriceBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetPriceBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetPriceArray() { return __p.__vector_as_array<int>(6); }
  public bool MutatePrice(int j, int Price) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutInt(__p.__vector(o) + j * 4, Price); return true; } else { return false; } }
  public int Profit(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ProfitLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetProfitBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetProfitBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetProfitArray() { return __p.__vector_as_array<int>(8); }
  public bool MutateProfit(int j, int Profit) { int o = __p.__offset(8); if (o != 0) { __p.bb.PutInt(__p.__vector(o) + j * 4, Profit); return true; } else { return false; } }

  public static Offset<FlatBufferGenerated.Simple4.Database.FoodProfit> CreateFoodProfit(FlatBufferBuilder builder,
      FlatBufferGenerated.Simple4.Database.EProfitFoodType Type = FlatBufferGenerated.Simple4.Database.EProfitFoodType.TypeA,
      VectorOffset PriceOffset = default(VectorOffset),
      VectorOffset ProfitOffset = default(VectorOffset)) {
    builder.StartTable(3);
    FoodProfit.AddProfit(builder, ProfitOffset);
    FoodProfit.AddPrice(builder, PriceOffset);
    FoodProfit.AddType(builder, Type);
    return FoodProfit.EndFoodProfit(builder);
  }

  public static void StartFoodProfit(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddType(FlatBufferBuilder builder, FlatBufferGenerated.Simple4.Database.EProfitFoodType Type) { builder.AddByte(0, (byte)Type, 1); }
  public static void AddPrice(FlatBufferBuilder builder, VectorOffset PriceOffset) { builder.AddOffset(1, PriceOffset.Value, 0); }
  public static VectorOffset CreatePriceVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePriceVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPriceVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddProfit(FlatBufferBuilder builder, VectorOffset ProfitOffset) { builder.AddOffset(2, ProfitOffset.Value, 0); }
  public static VectorOffset CreateProfitVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateProfitVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartProfitVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatBufferGenerated.Simple4.Database.FoodProfit> EndFoodProfit(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatBufferGenerated.Simple4.Database.FoodProfit>(o);
  }
};


}
