// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBufferGenerated.Worldreaver.Idle.User
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct UserWaveProgress : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static UserWaveProgress GetRootAsUserWaveProgress(ByteBuffer _bb) { return GetRootAsUserWaveProgress(_bb, new UserWaveProgress()); }
  public static UserWaveProgress GetRootAsUserWaveProgress(ByteBuffer _bb, UserWaveProgress obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UserWaveProgress __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int CurrentLevel { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CurrentWave { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<FlatBufferGenerated.Worldreaver.Idle.User.UserWaveProgress> CreateUserWaveProgress(FlatBufferBuilder builder,
      int CurrentLevel = 0,
      int CurrentWave = 0) {
    builder.StartTable(2);
    UserWaveProgress.AddCurrentWave(builder, CurrentWave);
    UserWaveProgress.AddCurrentLevel(builder, CurrentLevel);
    return UserWaveProgress.EndUserWaveProgress(builder);
  }

  public static void StartUserWaveProgress(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddCurrentLevel(FlatBufferBuilder builder, int CurrentLevel) { builder.AddInt(0, CurrentLevel, 0); }
  public static void AddCurrentWave(FlatBufferBuilder builder, int CurrentWave) { builder.AddInt(1, CurrentWave, 0); }
  public static Offset<FlatBufferGenerated.Worldreaver.Idle.User.UserWaveProgress> EndUserWaveProgress(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatBufferGenerated.Worldreaver.Idle.User.UserWaveProgress>(o);
  }
  public UserWaveProgressT UnPack() {
    var _o = new UserWaveProgressT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(UserWaveProgressT _o) {
    _o.CurrentLevel = this.CurrentLevel;
    _o.CurrentWave = this.CurrentWave;
  }
  public static Offset<FlatBufferGenerated.Worldreaver.Idle.User.UserWaveProgress> Pack(FlatBufferBuilder builder, UserWaveProgressT _o) {
    if (_o == null) return default(Offset<FlatBufferGenerated.Worldreaver.Idle.User.UserWaveProgress>);
    return CreateUserWaveProgress(
      builder,
      _o.CurrentLevel,
      _o.CurrentWave);
  }
};

public class UserWaveProgressT
{
  public int CurrentLevel { get; set; }
  public int CurrentWave { get; set; }

  public UserWaveProgressT() {
    this.CurrentLevel = 0;
    this.CurrentWave = 0;
  }
}


}
