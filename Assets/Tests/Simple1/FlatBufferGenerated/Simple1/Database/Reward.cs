// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBufferGenerated.Simple1.Database
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Reward : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Reward GetRootAsReward(ByteBuffer _bb) { return GetRootAsReward(_bb, new Reward()); }
  public static Reward GetRootAsReward(ByteBuffer _bb, Reward obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Reward __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateId(int Id) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, Id); return true; } else { return false; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int Value { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateValue(int Value) { int o = __p.__offset(8); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, Value); return true; } else { return false; } }

  public static Offset<FlatBufferGenerated.Simple1.Database.Reward> CreateReward(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset NameOffset = default(StringOffset),
      int Value = 0) {
    builder.StartTable(3);
    Reward.AddValue(builder, Value);
    Reward.AddName(builder, NameOffset);
    Reward.AddId(builder, Id);
    return Reward.EndReward(builder);
  }

  public static void StartReward(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, int Value) { builder.AddInt(2, Value, 0); }
  public static Offset<FlatBufferGenerated.Simple1.Database.Reward> EndReward(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatBufferGenerated.Simple1.Database.Reward>(o);
  }
};


}
